{{!
    This file is part of Moodle - http://moodle.org/

    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    @template assignfeedback_structured/criteriasets

    Provides a template for the structured feedback plugin's criteria set management modal.

    Classes required for JS:
    * criteria-data

    Data attributes required for JS:
    * data-context
    * data-criteriaset-id
    * data-criteriaset-name
    * data-set-action
    * data-toggle

    Context variables required for this template:
    * contextId The context ID of the current assignment instance.
    * manage Whether a full management interface is required (otherwise it's read only).
    * canPublish Whether the current user can publish criteria sets.
    * ownedSets An array of data objects for all saved criteria sets owned by the current user.
    * sharedSets An array of data objects for any other available criteria sets.

    Example context (json):
    {
        "contextId": 1,
        "manage": true,
        "canPublish": false,
        "ownedSets": [
            {
                "id": 1,
                "name": "Criteria set 1",
                "shared": true
            },
            {
                "id": 2,
                "name": "Criteria set 2",
                "shared": false
            }
        ],
        "sharedSets": [
            {
                "id": 1,
                "name": "Criteria set 3"
            },
            {
                "id": 2,
                "name": "Criteria set 4"
            }
        ]
    }

}}
<div class="assignfeedback_structured_criteriasets">
    <div class="criteriasets-page" data-context="{{contextId}}">
        <div class="criteriasets-owned">
            {{^manage}}
                <h5>{{#str}} criteriasetsowned, assignfeedback_structured {{/str}}</h5>
            {{/manage}}
            {{^ownedSets}}
                {{#str}} noownedsets, assignfeedback_structured {{/str}}
            {{/ownedSets}}
            {{#ownedSets}}
                <div class="criteriaset-row" data-criteriaset-id="{{id}}" data-criteriaset-name="{{name}}">
                    <div class="float-left">
                        <a href="#criteria-data-{{manage}}-{{id}}" class="collapsed" data-toggle="collapse" role="button"
                           aria-expanded="false" aria-controls="criteria-data-{{manage}}-{{id}}">{{name}}</a>
                        {{#manage}}
                            <input type="text" name="criteriaset-newname" size="32" maxlength="64"
                                   title="{{#str}} escapetocancel, assignfeedback_structured {{/str}}">
                            <a href="#" data-set-action="editname" role="button">
                                {{#pix}}
                                    t/editstring, core, {{#str}} criteriasetnameedit, assignfeedback_structured {{/str}}
                                {{/pix}}
                            </a>
                            {{> core/loading }}
                        {{/manage}}
                    </div>
                    <div class="float-right">
                        {{> core/loading }}
                        {{#manage}}
                            {{#canPublish}}
                                <label>
                                    <input type="checkbox" name="criteriaset-shared" data-set-action="shared"
                                        {{#shared}} checked {{/shared}}>
                                    {{#str}} criteriasetshared, assignfeedback_structured {{/str}}
                                </label>
                            {{/canPublish}}
                            <button type="button" class="btn btn-primary" data-set-action="delete">
                                {{#str}} delete {{/str}}
                            </button>
                        {{/manage}}
                        {{^manage}}
                            <button type="button" class="btn btn-primary" data-set-action="use">
                                {{#str}} criteriasetuse, assignfeedback_structured {{/str}}
                            </button>
                        {{/manage}}
                    </div>
                    <div id="criteria-data-{{manage}}-{{id}}" class="criteria-data collapse">
                        {{> core/loading }}
                    </div>
                    <div class="clearer"></div>
                </div>
            {{/ownedSets}}
        </div>
        {{^manage}}
            <div class="criteriasets-shared">
                <h5>{{#str}} criteriasetsshared, assignfeedback_structured {{/str}}</h5>
                {{^sharedSets}}
                    {{#str}} nosharedsets, assignfeedback_structured {{/str}}
                {{/sharedSets}}
                {{#sharedSets}}
                    <div class="criteriaset-row" data-criteriaset-id="{{id}}" data-criteriaset-name="{{name}}">
                        <div class="float-left">
                            <a href="#criteria-data-{{manage}}-{{id}}" class="collapsed" data-toggle="collapse" role="button"
                               aria-expanded="false" aria-controls="criteria-data-{{manage}}-{{id}}">{{name}}</a>
                        </div>
                        <div class="float-right">
                            {{> core/loading }}
                            <button type="button" class="btn btn-primary" data-set-action="use">
                                {{#str}} criteriasetuse, assignfeedback_structured {{/str}}
                            </button>
                        </div>
                        <div id="criteria-data-{{manage}}-{{id}}" class="criteria-data collapse">
                            {{> core/loading }}
                        </div>
                        <div class="clearer"></div>
                    </div>
                {{/sharedSets}}
            </div>
        {{/manage}}
    </div>
</div>
{{#js}}
    require([
        'jquery',
        'core/ajax',
        'core/notification',
        'core/str',
        'core/templates'
    ],
    function($, ajax, notification, str, templates) {
        $('.loading-icon').hide();

        // Set initial display of shared criteria sets.
        var showShared = $('.criteriasets-footer').find('[data-action="showshared"]'),
            sharedSets = $('.criteriasets-page').find('.criteriasets-shared');
        toggleShared(showShared, sharedSets);

        // Toggle display of shared sets on checkbox click.
        showShared.on('click', function() {
            toggleShared(showShared, sharedSets);
        });

        /**
         * Function to determine and set the preferred display of shared criteria sets.
         *
         * @param {boolean} showShared Whether or not to show shared sets.
         * @param {object} sharedSets The node containing the shared sets.
         */
        function toggleShared(showShared, sharedSets) {
            if (showShared.prop('checked')) {
                sharedSets.show();
            } else {
                sharedSets.hide();
            }
        }

        // Get criteria data when expanded for the first time.
        var criteriaToggle = $('[data-toggle="collapse"]');
        criteriaToggle.on('click', function() {
            if ($(this).hasClass('collapsed')) {
                var spinner = $(this).parent().siblings('.criteria-data').children('.loading-icon');
                spinner.show();
                getCriteria($(this).parent().parent()).done(function() {
                    spinner.hide();
                }).fail(notification.exception);
            }
        });

        // Also trigger toggle if spacebar is pressed (for accessibility).
        criteriaToggle.on('keydown', function(e) {
            if (e.keyCode == 32) {
                e.preventDefault();
                $(this).trigger('click');
            }
        });

        /**
         * Function to call a web service method via AJAX to fetch the criteria data for the given set.
         *
         * @param {object} set The node containing the details of the criteria set to be fetched.
         * @return {object} A jQuery promise.
         */
        function getCriteria(set) {
            var contextId = set.parent().parent().data('context'),
                setId = set.data('criteriaset-id'),
                criteriaNode = set.children('.criteria-data'),
                deferred = $.Deferred();

            if (!criteriaNode.children('.assignfeedback_structured_criteria').length) {
                var request = ajax.call([{
                    methodname: 'assignfeedback_structured_get_criteria',
                    args: {
                        contextid: contextId,
                        criteriasetid: setId
                    }
                }]);

                request[0].done(function(response) {
                    var context = {
                        criteriaData: response
                    };
                    templates.render('assignfeedback_structured/criteria', context).done(function(html, js) {
                        if (!criteriaNode.children('.assignfeedback_structured_criteria').length) {
                            templates.appendNodeContents(criteriaNode, html, js);
                        }
                        deferred.resolve();
                    }).fail(function(ex) {
                        deferred.reject(ex);
                    });
                }).fail(function(ex) {
                    deferred.reject(ex);
                });
            } else {
                deferred.resolve();
            }

            return deferred.promise();
        }

        // Edit criteria set name on button click.
        $('[name="criteriaset-newname"]').hide();
        $('[data-set-action="editname"]').on('click keydown', function(e) {
            if (e.type == 'click' || e.keyCode == 32) {
                e.preventDefault();
                var set = $(this).parent().parent(),
                    setName = set.data('criteriaset-name'),
                    editButton = $(this),
                    nameElement = $(this).siblings('[data-toggle="collapse"]'),
                    nameInput = $(this).siblings('[name="criteriaset-newname"]');

                // Hide name and button and show input field.
                editButton.hide();
                nameElement.hide();
                nameInput.val(setName);
                nameInput.show();
                nameInput.focus();
                nameInput.select();

                // On blur, hide input field and set the new name (if changed).
                nameInput.off().on('blur keydown', function(e) {
                    var rawName = nameInput.val().trim(),
                        spinner = nameInput.siblings('.loading-icon');

                    // Prevent multiple blur triggers with key presses.
                    if (e.type == 'keydown' && (e.keyCode == 13 || e.keyCode == 27)) {
                        nameInput.off('blur');
                    }
                    if (e.keyCode == 27) {
                        // Cancel on escape.
                        e.stopPropagation();
                        nameInput.hide();
                        nameElement.show();
                        editButton.show();
                    } else if (e.type == 'blur' || e.keyCode == 13) {
                        // Save on enter (or any other loss of focus).
                        var newName = rawName.charAt(0).toUpperCase() + rawName.slice(1);
                        nameInput.val(newName);
                        if (newName && newName != setName) {
                            var updates = {
                                name: newName
                            };
                            spinner.show();
                            updateCriteriaSet(set, updates).done(function(response) {
                                if (response.success === true) {
                                    nameInput.hide();
                                    setName = newName;
                                    set.data('criteriaset-name', newName);
                                    nameElement.text(newName);
                                    nameElement.show();
                                    editButton.show();
                                } else {
                                    notification.alert(response.title, response.body, response.label);
                                    nameInput.hide();
                                    nameElement.show();
                                    editButton.show();
                                }
                                spinner.hide();
                            }).fail(notification.exception);
                        } else {
                            nameInput.hide();
                            nameElement.show();
                            editButton.show();
                        }
                    }
                });
            }
        });

        // Change shared visibility of a criteria set.
        $('[data-set-action="shared"]').on('change', function() {
            var set = $(this).parent().parent().parent(),
                updates = {
                    shared: $(this).prop('checked')
                },
                spinner = $(this).parent().siblings('.loading-icon');

            spinner.show();
            updateCriteriaSet(set, updates)
                .done(spinner.hide())
                .fail(notification.exception);
        });

        /**
         * Function to call a web service method via AJAX to update a criteria set with the data provided.
         *
         * @param {object} set The node containing the details of the criteria set to be updated.
         * @param {object} updates A set of key/value pairs of data fields to be updated.
         * @return {object} A jQuery promise.
         */
        function updateCriteriaSet(set, updates) {
            var contextId = set.parent().parent().data('context'),
                setId = set.data('criteriaset-id'),
                deferred = $.Deferred();

            var request = ajax.call([{
                methodname: 'assignfeedback_structured_update_criteriaset',
                args: {
                    contextid: contextId,
                    criteriasetid: setId,
                    updates: updates
                }
            }]);

            request[0].done(function(response) {
                deferred.resolve(response);
            }).fail(function(ex) {
                deferred.reject(ex);
            });

            return deferred.promise();
        }

        // Delete criteria set.
        var deleteButton = $('[data-set-action="delete"]');
        deleteButton.on('click', function() {
            var set = $(this).parent().parent(),
                contextId = set.parent().parent().data('context'),
                setId = set.data('criteriaset-id'),
                setName = set.data('criteriaset-name'),
                spinner = $(this).siblings('.loading-icon');

            str.get_strings([
                {key: 'delete'},
                {key: 'criteriasetconfirmdelete', component: 'assignfeedback_structured', param: setName},
                {key: 'yes'},
                {key: 'no'},
                {key: 'error'},
                {key: 'criteriasetnotdeleted', component: 'assignfeedback_structured', param: setName},
                {key: 'continue'}
            ]).done(function(s) {
                notification.confirm(s[0], s[1], s[2], s[3], function() {
                    spinner.show();

                    var request = ajax.call([{
                        methodname: 'assignfeedback_structured_delete_criteriaset',
                        args: {
                            contextid: contextId,
                            criteriasetid: setId
                        }
                    }]);

                    request[0].done(function(response) {
                        if (response === true) {
                            set.hide();
                        } else {
                            notification.alert(s[4], s[5], s[6]);
                        }
                    }).fail(notification.exception).always(function() {
                        spinner.hide();
                    });
                });
            }).fail(notification.exception);
        });

        // Use criteria set.
        var useButton = $('[data-set-action="use"]');
        useButton.on('click', function() {
            var set = $(this).parent().parent(),
                spinner = $('#id_assignfeedback_structured_critset').siblings('.loading-icon'),
                use = true;

            // Check each criterion name field for a value.
            $('[id^="id_assignfeedback_structured_critname"]').each(function() {
                if ($(this).val().trim()) {
                    use = false;
                    str.get_strings([
                        {key: 'criteriasetuse', component: 'assignfeedback_structured'},
                        {key: 'criteriasetconfirmuse', component: 'assignfeedback_structured'},
                        {key: 'yes'},
                        {key: 'no'}
                    ]).done(function(s) {
                        notification.confirm(s[0], s[1], s[2], s[3], function() {
                            useSet(set, spinner);
                        });
                    }).fail(notification.exception);
                    // Break out of loop.
                    return false;
                }
            });
            if (use == true) {
                useSet(set, spinner);
            }
            useButton.attr('data-action', 'hide');
        });

        /**
         * Function to configure the current assignment to use the selected saved criteria set.
         *
         * @param {object} set The node containing the details of the criteria set to be used.
         * @param {object} spinner The node of a javascript loading icon.
         */
        function useSet(set, spinner) {
            spinner.show();
            if (!set.children('.criteria-data').children('.assignfeedback_structured_criteria').length) {
                getCriteria(set).done(function() {
                    processCriteriaData(set.children('.criteria-data')).done(function() {
                        spinner.hide();
                    }).fail(notification.exception);
                }).fail(notification.exception);
            } else {
                processCriteriaData(set.children('.criteria-data')).done(function() {
                    spinner.hide();
                }).fail(notification.exception);
            }
        }

        /**
         * Function to process the criteria data for a chosen criteria set and populate the config form fields.
         *
         * @param {object} criteriaData The node containing the criteria data to be processed.
         * @return {object} A jQuery promise.
         */
        function processCriteriaData(criteriaData) {
            var criteriaList = criteriaData.find('.criteria-list').children('li'),
                configData = [],
                deferred = $.Deferred();

            // Prepare the criteria data.
            criteriaList.each(function() {
                var name = $(this).data('criterion-name'),
                    desc = $(this).data('criterion-desc');
                configData.push({
                    name: name,
                    desc: desc
                });
            });

            // Append any additional criteria config fields as necessary.
            var repeats = $('[name="assignfeedback_structured_repeats"]');
            var critFields = parseInt(repeats.val(), 10);
            if (configData.length > critFields) {
                var newIndexes = [];
                for (var i = critFields; i < configData.length; i++) {
                    newIndexes.push({
                        nodeIndex: i,
                        critIndex: i + 1
                    });
                }
                // Use a template to add name and description fields.
                var context = {
                    lastNodeIndex: critFields - 1,
                    lastCritIndex: critFields,
                    newIndexes: newIndexes
                };
                var lastFieldId = 'id_assignfeedback_structured_critdesc_' + (critFields - 1);
                var lastNode = $('#fitem_' + lastFieldId + '[class^="form-group"]');
                var templateName = 'assignfeedback_structured/criterianodes_boost';
                // Use a different template for Clean-based themes.
                if (!lastNode.length) {
                    lastNode = $('#fitem_' + lastFieldId);
                    templateName = 'assignfeedback_structured/criterianodes';
                }
                templates.render(templateName, context).done(function(html, js) {
                    templates.replaceNode(lastNode, html, js);
                    populateFields();
                });
                // Set number of repeats to new value.
                repeats.val(configData.length);
            } else {
                for (var j = 0; j < critFields; j++) {
                    // Clear any existing data.
                    $('#id_assignfeedback_structured_critname_' + j).val('');
                    $('#id_assignfeedback_structured_critdesc_' + j).val('');
                }
                populateFields();
                // Freeze 'add criteria fields' button.
                $('#id_assignfeedback_structured_critfieldsadd').prop('disabled', true);
            }
            if (configData.length >= critFields) {
                // Unfreeze 'add criteria fields' button.
                $('#id_assignfeedback_structured_critfieldsadd').prop('disabled', false);
            }
            // Unfreeze 'save criteria set' checkbox.
            $('#id_assignfeedback_structured_critsetsave').prop('disabled', false);

            /**
             * Function to populate fields for each criterion from config data.
             */
            function populateFields() {
                $.each(configData, function(index, criterion) {
                    $.each(criterion, function(fieldName, value) {
                        var field = '#id_assignfeedback_structured_crit' + fieldName + '_' + index;
                        $(field).val(value);
                    });
                });
                deferred.resolve();
            }

            return deferred.promise();
        }
    });
{{/js}}
